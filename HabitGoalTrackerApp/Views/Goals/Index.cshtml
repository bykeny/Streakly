@model IEnumerable<HabitGoalTrackerApp.Models.ViewModels.GoalListViewModel>

@{
    ViewData["Title"] = "My Goals";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-1">My Goals</h1>
        <p class="text-muted mb-0">Track your long-term objectives and milestones</p>
    </div>
    <a asp-action="Create" class="btn btn-primary">
        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
        Add New Goal
    </a>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="row mb-4">
    <div class="col-lg-8">
        <!-- Filter Tabs -->
        <div class="card">
            <div class="card-body">
                <div class="btn-group" role="group" aria-label="Goal filters">
                    <input type="radio" class="btn-check" name="goalFilter" id="filterAll" autocomplete="off" checked>
                    <label class="btn btn-outline-primary" for="filterAll">All Goals</label>

                    <input type="radio" class="btn-check" name="goalFilter" id="filterActive" autocomplete="off">
                    <label class="btn btn-outline-primary" for="filterActive">In Progress</label>

                    <input type="radio" class="btn-check" name="goalFilter" id="filterCompleted" autocomplete="off">
                    <label class="btn btn-outline-primary" for="filterCompleted">Completed</label>

                    <input type="radio" class="btn-check" name="goalFilter" id="filterOverdue" autocomplete="off">
                    <label class="btn btn-outline-primary" for="filterOverdue">Overdue</label>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <!-- Quick Stats -->
        <div class="card">
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-4">
                        <div class="stat-number text-primary">@Model.Count()</div>
                        <div class="stat-label">Total</div>
                    </div>
                    <div class="col-4">
                        <div class="stat-number text-success">@Model.Count(g => g.IsCompleted)</div>
                        <div class="stat-label">Completed</div>
                    </div>
                    <div class="col-4">
                        <div class="stat-number text-warning">@Model.Count(g => g.IsOverdue)</div>
                        <div class="stat-label">Overdue</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <!-- Empty State -->
    <div class="text-center py-5">
        <div class="empty-state-icon mb-4">
            <svg width="80" height="80" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="text-muted">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
        </div>
        <h3 class="h4 text-muted mb-3">No goals yet</h3>
        <p class="text-muted mb-4">Set your first goal and start working towards your dreams!</p>
        <a asp-action="Create" class="btn btn-primary">Create Your First Goal</a>
    </div>
}
else
{
    <div class="row" id="goalsContainer">
        @foreach (var goal in Model)
        {
            <div class="col-lg-6 col-xl-4 mb-4 goal-item"
                 data-status="@(goal.IsCompleted ? "completed" : goal.IsOverdue ? "overdue" : "active")"
                 data-category="@goal.Category.ToString().ToLower()">
                <div class="goal-card h-100">
                    <div class="card-body">
                        <!-- Goal Header -->
                        <div class="d-flex align-items-start justify-content-between mb-3">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-2">
                                    <span class="category-badge me-2" data-category="@goal.Category.ToString().ToLower()">
                                        @goal.CategoryDisplay
                                    </span>
                                    <span class="status-badge status-@(goal.IsCompleted ? "completed" : goal.IsOverdue ? "overdue" : "active")">
                                        @goal.StatusDisplay
                                    </span>
                                </div>
                                <h5 class="card-title mb-1">@goal.Title</h5>
                                @if (!string.IsNullOrEmpty(goal.Description))
                                {
                                    <p class="text-muted small mb-0">@goal.Description</p>
                                }
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                    </svg>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@goal.Id">View Details</a></li>
                                    <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@goal.Id">Edit</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@goal.Id">Delete</a></li>
                                </ul>
                            </div>
                        </div>

                        <!-- Progress Section -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="small text-muted">Progress</span>
                                <span class="small fw-semibold">@goal.CurrentValue/@goal.TargetValue @goal.Unit</span>
                            </div>
                            <div class="progress mb-2" style="height: 8px;">
                                <div class="progress-bar @(goal.IsCompleted ? "bg-success" : goal.IsOverdue ? "bg-danger" : "bg-primary")"
                                     style="width: @goal.ProgressPercentage%"></div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="small text-muted">@Math.Round(goal.ProgressPercentage, 1)% complete</span>
                                @if (goal.TargetDate.HasValue)
                                {
                                    @if (goal.IsCompleted)
                                    {
                                        <span class="small text-success">
                                            <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-1">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                            Completed @goal.CompletedAt?.ToString("MMM dd")
                                        </span>
                                    }
                                    else if (goal.IsOverdue)
                                    {
                                        <span class="small text-danger">
                                            <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-1">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Overdue
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="small text-muted">
                                            @goal.DaysRemaining days left
                                        </span>
                                    }
                                }
                            </div>
                        </div>

                        <!-- Action Button -->
                        <div class="d-grid">
                            @if (goal.IsCompleted)
                            {
                                <a asp-action="Details" asp-route-id="@goal.Id" class="btn btn-outline-success">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    View Completed Goal
                                </a>
                            }
                            else
                            {
                                <a asp-action="Details" asp-route-id="@goal.Id" class="btn btn-primary">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                    Add Progress
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filter functionality
        document.querySelectorAll('input[name="goalFilter"]').forEach(filter => {
            filter.addEventListener('change', function() {
                const filterValue = this.id;
                const goalItems = document.querySelectorAll('.goal-item');

                goalItems.forEach(item => {
                    let show = true;
                    const status = item.dataset.status;

                    switch(filterValue) {
                        case 'filterActive':
                            show = status === 'active';
                            break;
                        case 'filterCompleted':
                            show = status === 'completed';
                            break;
                        case 'filterOverdue':
                            show = status === 'overdue';
                            break;
                        default: // filterAll
                            show = true;
                    }

                    item.style.display = show ? 'block' : 'none';
                });
            });
        });
    });
</script>

<style>
    .goal-card {
        transition: all 0.2s ease;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .goal-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .category-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        background-color: var(--gray-100);
        color: var(--gray-700);
    }

    .category-badge[data-category="health"] { background-color: #dcfce7; color: #166534; }
    .category-badge[data-category="career"] { background-color: #dbeafe; color: #1e40af; }
    .category-badge[data-category="finance"] { background-color: #fef3c7; color: #92400e; }
    .category-badge[data-category="fitness"] { background-color: #fce7f3; color: #be185d; }
    .category-badge[data-category="education"] { background-color: #e0e7ff; color: #3730a3; }
    .category-badge[data-category="hobby"] { background-color: #f3e8ff; color: #6b21a8; }
    .category-badge[data-category="travel"] { background-color: #ecfdf5; color: #047857; }
    .category-badge[data-category="relationship"] { background-color: #fef2f2; color: #dc2626; }

    .status-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
    }

    .status-completed { background-color: #dcfce7; color: #166534; }
    .status-active { background-color: #dbeafe; color: #1e40af; }
    .status-overdue { background-color: #fef2f2; color: #dc2626; }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.75rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .empty-state-icon {
        opacity: 0.5;
    }
</style>