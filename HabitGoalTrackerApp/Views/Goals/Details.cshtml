@model HabitGoalTrackerApp.Models.ViewModels.GoalDetailsViewModel

@{
    ViewData["Title"] = $"Details - {Model.Title}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-1">@Model.Title</h1>
        <p class="text-muted mb-0">Goal details and progress tracking</p>
    </div>
    <div class="d-flex gap-2">
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
            Edit
        </a>
        <a asp-action="Index" class="btn btn-secondary">
            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Goals
        </a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="row">
    <div class="col-lg-8">
        <!-- Goal Overview Card -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between mb-4">
                    <div class="flex-grow-1">
                        <div class="d-flex align-items-center mb-3">
                            <span class="category-badge me-2" data-category="@Model.Category.ToString().ToLower()">
                                @Model.CategoryDisplay
                            </span>
                            <span class="status-badge status-@(Model.IsCompleted ? "completed" : Model.IsOverdue ? "overdue" : "active")">
                                @Model.StatusDisplay
                            </span>
                        </div>
                        <h3 class="mb-2">@Model.Title</h3>
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <p class="text-muted mb-3">@Model.Description</p>
                        }
                        <div class="d-flex align-items-center gap-3 text-muted small">
                            <span>Created @Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                            @if (Model.TargetDate.HasValue)
                            {
                                <span>Target: @Model.TargetDate.Value.ToString("MMM dd, yyyy")</span>
                            }
                            @if (Model.CompletedAt.HasValue)
                            {
                                <span class="text-success">Completed: @Model.CompletedAt.Value.ToString("MMM dd, yyyy")</span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Progress Overview -->
                <div class="progress-overview mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">Progress Overview</h5>
                        <span class="h4 mb-0">@Model.CurrentValue/@Model.TargetValue @Model.Unit</span>
                    </div>
                    <div class="progress mb-3" style="height: 12px;">
                        <div class="progress-bar @(Model.IsCompleted ? "bg-success" : Model.IsOverdue ? "bg-danger" : "bg-primary")"
                             style="width: @Model.ProgressPercentage%"></div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-muted">@Math.Round(Model.ProgressPercentage, 1)% complete</span>
                        @if (Model.TargetDate.HasValue && !Model.IsCompleted)
                        {
                            <span class="text-muted">@Model.DaysRemaining days remaining</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Entries -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                    Progress History
                </h5>
                @if (!Model.IsCompleted)
                {
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addProgressModal">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-1">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Add Progress
                    </button>
                }
            </div>
            <div class="card-body">
                @if (!Model.ProgressEntries.Any())
                {
                    <div class="text-center py-4">
                        <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="text-muted mb-3">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                        <p class="text-muted mb-3">No progress entries yet</p>
                        @if (!Model.IsCompleted)
                        {
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProgressModal">
                                Add Your First Progress Entry
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="progress-timeline">
                        @foreach (var entry in Model.ProgressEntries)
                        {
                            <div class="progress-entry">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-1">
                                            <span class="progress-value">+@entry.Value @Model.Unit</span>
                                            <span class="progress-total ms-2 text-muted">(Total: @entry.RunningTotal @Model.Unit)</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(entry.Notes))
                                        {
                                            <p class="progress-notes mb-1">@entry.Notes</p>
                                        }
                                        <small class="text-muted">@entry.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                    </div>
                                    <button class="btn btn-sm btn-outline-danger delete-progress" data-progress-id="@entry.Id">
                                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Statistics Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Statistics</h5>
            </div>
            <div class="card-body">
                <div class="stat-item mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-muted">Progress Entries</span>
                        <span class="h5 mb-0 text-primary">@Model.Statistics.TotalProgressEntries</span>
                    </div>
                </div>

                <div class="stat-item mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-muted">Average per Day</span>
                        <span class="h5 mb-0 text-info">@Model.Statistics.AverageProgressPerDay @Model.Unit</span>
                    </div>
                </div>

                @if (Model.Statistics.LargestSingleProgress > 0)
                {
                    <div class="stat-item mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">Largest Entry</span>
                            <span class="h5 mb-0 text-success">@Model.Statistics.LargestSingleProgress @Model.Unit</span>
                        </div>
                    </div>
                }

                @if (Model.Statistics.LastProgressDate.HasValue)
                {
                    <div class="stat-item mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">Last Progress</span>
                            <span class="h6 mb-0">@Model.Statistics.DaysSinceLastProgress days ago</span>
                        </div>
                    </div>
                }

                @if (Model.Statistics.ProjectedCompletionDate.HasValue && !Model.IsCompleted)
                {
                    <div class="stat-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-muted">Projected Completion</span>
                            <span class="h6 mb-0 text-warning">@Model.Statistics.ProjectedCompletionDate.Value.ToString("MMM dd")</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Quick Actions Card -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    @if (!Model.IsCompleted)
                    {
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProgressModal">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add Progress
                        </button>
                    }

                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Edit Goal
                    </a>

                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        Delete Goal
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Progress Model -->
<div class="modal fade" id="addProgressModal" tabindex="-1" aria-labelledby="addProgressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="AddProgress" asp-route-id="@Model.Id" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProgressModalLabel">Add Progress</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @* <div class="mb-3">
                        <label for="progressValue" class="form-label">Progress Value *</label>
                        <div class="input-group">
                            <input type="number" step="0.01" class="form-control" id="progressValue" name="Value" required>
                            <span class="input-group-text">@Model.Unit</span>
                        </div>
                        <div class="form-text">How much progress did you make?</div>
                    </div> *@
                    <div class="mb-3">
                        <label for="progressValue" class="form-label">Progress Value *</label>
                        <div class="input-group">
                            <input type="number" step="0.01" min="0.01" class="form-control" id="progressValue" name="Value" required>
                            <span class="input-group-text">@Model.Unit</span>
                        </div>
                        <div class="form-text">How much progress did you make?</div>
                        <div class="invalid-feedback">Please enter a valid progress value.</div>
                    </div>
                    <div class="mb-3">
                        <label for="progressNotes" class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="progressNotes" name="Notes" rows="3" placeholder="Add any notes about this progress..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Progress</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    //// Old version
    // document.addEventListener('DOMContentLoaded', function() {
    //     document.querySelectorAll('.delete-progress').forEach(button => {
    //         button.addEventListener('click', function() {
    //             const progressId = this.dataset.progressId;

    //             if (!confirm('Are you sure you want to delete this progress entry?')) {
    //                 return;
    //             }

    //             fetch(`/Goals/DeleteProgress/${progressId}`, {
    //                 method: 'POST',
    //                 headers: {
    //                     'Content-Type': 'application/json',
    //                     'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
    //                 }
    //             })
    //             fetch(`/Goals/DeleteProgress/${progressId}`, {
    //                 method: 'POST',
    //                 headers: {
    //                     'Content-Type': 'application/json',
    //                     'X-Requested-With': 'XMLHttpRequest'
    //                 },
    //                 body: JSON.stringify({
    //                     __RequestVerificationToken: document.querySelector('input[name="__RequestVerificationToken"]')?.value
    //                 })
    //             })
    //             .then(response => response.json())
    //             .then(data => {
    //                 if (data.success) {
    //                     showToast(data.message, 'success');
    //                     setTimeout(() => {
    //                         location.reload();
    //                     }, 1000);
    //                 } else {
    //                     showToast(data.message, 'error');
    //                 }
    //             })
    //             .catch(error => {
    //                 console.error('Error:', error);
    //                 showToast('An error occurred. Please try again.', 'error');
    //             });
    //         });
    //     });

    //     function showToast(message, type) {
    //         const toast = document.createElement('div');
    //         toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
    //         toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
    //         toast.innerHTML = `
    //             ${message}
    //             <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    //         `;

    //         document.body.appendChild(toast);

    //         setTimeout(() => {
    //             if (toast.parentNode) {
    //                 toast.remove();
    //             }
    //         }, 3000);
    //     }
    // });

        document.addEventListener('DOMContentLoaded', function() {
        // Delete progress functionality with form submission
        document.querySelectorAll('.delete-progress').forEach(button => {
            button.addEventListener('click', function() {
                const progressId = this.dataset.progressId;

                if (!confirm('Are you sure you want to delete this progress entry?')) {
                    return;
                }

                // Create a form and submit it
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/Goals/DeleteProgress/${progressId}`;

                // Add CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                // Add X-Requested-With header for AJAX detection
                const ajaxInput = document.createElement('input');
                ajaxInput.type = 'hidden';
                ajaxInput.name = 'X-Requested-With';
                ajaxInput.value = 'XMLHttpRequest';
                form.appendChild(ajaxInput);

                document.body.appendChild(form);

                // Submit and handle response
                form.addEventListener('submit', function(e) {
                    e.preventDefault();

                    fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form),
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message, 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast(data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred. Please try again.', 'error');
                    })
                    .finally(() => {
                        document.body.removeChild(form);
                    });
                });

                form.submit();
            });
        });

        // Toast notification function
        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }
    });

        document.getElementById('progressValue').addEventListener('input', function() {
        const value = parseFloat(this.value);
        const submitBtn = document.querySelector('#addProgressModal button[type="submit"]');

        if (isNaN(value) || value <= 0) {
            this.classList.add('is-invalid');
            submitBtn.disabled = true;
        } else {
            this.classList.remove('is-invalid');
            submitBtn.disabled = false;
        }
    });
</script>

<style>
    .category-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        background-color: var(--gray-100);
        color: var(--gray-700);
    }

        .category-badge[data-category="health"] {
            background-color: #dcfce7;
            color: #166534;
        }

        .category-badge[data-category="career"] {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .category-badge[data-category="finance"] {
            background-color: #fef3c7;
            color: #92400e;
        }

        .category-badge[data-category="fitness"] {
            background-color: #fce7f3;
            color: #be185d;
        }

        .category-badge[data-category="education"] {
            background-color: #e0e7ff;
            color: #3730a3;
        }

        .category-badge[data-category="hobby"] {
            background-color: #f3e8ff;
            color: #6b21a8;
        }

        .category-badge[data-category="travel"] {
            background-color: #ecfdf5;
            color: #047857;
        }

        .category-badge[data-category="relationship"] {
            background-color: #fef2f2;
            color: #dc2626;
        }

    .status-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
    }

    .status-completed {
        background-color: #dcfce7;
        color: #166534;
    }

    .status-active {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .status-overdue {
        background-color: #fef2f2;
        color: #dc2626;
    }

    .progress-timeline {
        max-height: 400px;
        overflow-y: auto;
    }

    .progress-entry {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s ease;
    }

        .progress-entry:hover {
            background-color: var(--bg-secondary);
        }

        .progress-entry:last-child {
            border-bottom: none;
        }

    .progress-value {
        font-weight: 600;
        color: var(--success-color);
    }

    .progress-total {
        font-size: 0.875rem;
    }

    .progress-notes {
        color: var(--text-secondary);
        font-style: italic;
    }

    .stat-item {
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--border-color);
    }

        .stat-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }
</style>