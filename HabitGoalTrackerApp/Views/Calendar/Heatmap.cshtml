@model List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData>

@{
    ViewData["Title"] = "Habit Heatmap";
    var startDate = ViewBag.StartDate as DateTime? ?? DateTime.Today.AddDays(-365);
    var endDate = ViewBag.EndDate as DateTime? ?? DateTime.Today;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-1">Habit Heatmap</h1>
        <p class="text-muted mb-0">Visualize your habit consistency over time</p>
    </div>
    <div class="d-flex gap-2">
        <a asp-action="Index" class="btn btn-outline-primary">
            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="me-2">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2z"></path>
            </svg>
            Calendar View
        </a>
    </div>
</div>

<!-- Date Range Selector -->
<div class="row mb-4">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-body">
                <form method="get" class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" value="@startDate.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="col-md-4">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" value="@endDate.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary">Update Range</button>
                    </div>
                </form>

                <div class="mt-3">
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary" onclick="setDateRange(30)">Last 30 days</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="setDateRange(90)">Last 3 months</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="setDateRange(365)">Last year</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <!-- Heatmap Stats -->
        <div class="card">
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-4">
                        <div class="stat-number text-primary">@Model.Count(d => d.CompletionRate > 0)</div>
                        <div class="stat-label">Active Days</div>
                    </div>
                    <div class="col-4">
                        <div class="stat-number text-success">@Model.Count(d => d.CompletionRate >= 80)</div>
                        <div class="stat-label">Great Days</div>
                    </div>
                    <div class="col-4">
                        <div class="stat-number text-info">@(Model.Any() ? Math.Round(Model.Average(d => d.CompletionRate), 1) : 0)%</div>
                        <div class="stat-label">Avg Rate</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Heatmap Container -->
<div class="card">
    <div class="card-body">
        <div class="heatmap-container">
            <!-- Heatmap Legend -->
            <div class="heatmap-legend mb-3">
                <div class="d-flex align-items-center justify-content-between">
                    <span class="small text-muted">Less</span>
                    <div class="d-flex gap-1">
                        <div class="heatmap-legend-square level-0" title="No activity"></div>
                        <div class="heatmap-legend-square level-1" title="1-25% completion"></div>
                        <div class="heatmap-legend-square level-2" title="26-50% completion"></div>
                        <div class="heatmap-legend-square level-3" title="51-75% completion"></div>
                        <div class="heatmap-legend-square level-4" title="76-100% completion"></div>
                    </div>
                    <span class="small text-muted">More</span>
                </div>
            </div>

            <!-- Heatmap Grid -->
            <div class="heatmap-grid" id="heatmapGrid">
                @{
                    var currentDate = startDate;
                    var weeks = new List<List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData>>();
                    var currentWeek = new List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData>();

                    // Pad to start on Sunday
                    var startDayOfWeek = (int)currentDate.DayOfWeek;
                    for (int i = 0; i < startDayOfWeek; i++)
                    {
                        currentWeek.Add(null);
                    }

                    while (currentDate <= endDate)
                    {
                        var dayData = Model.FirstOrDefault(d => d.Date.Date == currentDate.Date);
                        if (dayData == null)
                        {
                            dayData = new HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData
                            {
                                Date = currentDate,
                                CompletedHabits = 0,
                                TotalHabits = 0,
                                CompletionRate = 0,
                                Level = 0
                            };
                        }

                        currentWeek.Add(dayData);

                        if (currentWeek.Count == 7)
                        {
                            weeks.Add(currentWeek);
                            currentWeek = new List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData>();
                        }

                        currentDate = currentDate.AddDays(1);
                    }

                    // Add remaining days to last week
                    if (currentWeek.Any())
                    {
                        while (currentWeek.Count < 7)
                        {
                            currentWeek.Add(null);
                        }
                        weeks.Add(currentWeek);
                    }
                }

                <!-- Month labels -->
                <div class="heatmap-months">
                    @{
                        var monthLabels = new List<string>();
                        var labelDate = startDate;
                        var weekIndex = 0;

                        while (labelDate <= endDate)
                        {
                            if (labelDate.Day <= 7 || labelDate == startDate)
                            {
                                monthLabels.Add($"<div class='heatmap-month-label' style='grid-column: {weekIndex + 1}'>{labelDate.ToString("MMM")}</div>");
                            }
                            labelDate = labelDate.AddDays(7);
                            weekIndex++;
                        }
                    }
                    @Html.Raw(string.Join("", monthLabels))
                </div>

                <!-- Day labels -->
                <div class="heatmap-days">
                    <div class="heatmap-day-label">Sun</div>
                    <div class="heatmap-day-label">Mon</div>
                    <div class="heatmap-day-label">Tue</div>
                    <div class="heatmap-day-label">Wed</div>
                    <div class="heatmap-day-label">Thu</div>
                    <div class="heatmap-day-label">Fri</div>
                    <div class="heatmap-day-label">Sat</div>
                </div>

                <!-- Heatmap squares -->
                <div class="heatmap-squares">
                    @foreach (var week in weeks)
                    {
                        <div class="heatmap-week">
                            @foreach (var day in week)
                            {
                                @if (day != null)
                                {
                                    <div class="heatmap-square level-@day.Level"
                                         data-date="@day.Date.ToString("yyyy-MM-dd")"
                                         data-completion="@day.CompletionRate"
                                         data-habits="@day.CompletedHabits/@day.TotalHabits"
                                         data-bs-toggle="tooltip"
                                         title="@day.Date.ToString("MMM dd, yyyy"): @day.CompletedHabits/@day.TotalHabits habits (@Math.Round(day.CompletionRate, 1)%)">
                                    </div>
                                }
                                else
                                {
                                    <div class="heatmap-square empty"></div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Detailed Stats -->
        <div class="row mt-4">
            <div class="col-md-6">
                <h6 class="fw-semibold mb-3">Completion Streaks</h6>
                <div class="streak-info">
                    @{
                        var streaks = CalculateStreaks(Model);
                        var currentStreak = CalculateCurrentStreak(Model);
                        var longestStreak = streaks.Any() ? streaks.Max() : 0;
                    }
                    <div class="d-flex justify-content-between mb-2">
                        <span>Current Streak:</span>
                        <span class="fw-semibold text-warning">@currentStreak days</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Longest Streak:</span>
                        <span class="fw-semibold text-success">@longestStreak days</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Total Streaks:</span>
                        <span class="fw-semibold text-info">@streaks.Count</span>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <h6 class="fw-semibold mb-3">Performance Breakdown</h6>
                <div class="performance-breakdown">
                    @{
                        var perfect = Model.Count(d => d.CompletionRate == 100);
                        var good = Model.Count(d => d.CompletionRate >= 75 && d.CompletionRate < 100);
                        var okay = Model.Count(d => d.CompletionRate >= 50 && d.CompletionRate < 75);
                        var poor = Model.Count(d => d.CompletionRate > 0 && d.CompletionRate < 50);
                        var none = Model.Count(d => d.CompletionRate == 0);
                    }
                    <div class="d-flex justify-content-between mb-2">
                        <span>Perfect Days (100%):</span>
                        <span class="fw-semibold text-success">@perfect</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Good Days (75-99%):</span>
                        <span class="fw-semibold text-info">@good</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Okay Days (50-74%):</span>
                        <span class="fw-semibold text-warning">@okay</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Poor Days (1-49%):</span>
                        <span class="fw-semibold text-danger">@poor</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>No Activity:</span>
                        <span class="fw-semibold text-muted">@none</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Heatmap square click handler
        document.querySelectorAll('.heatmap-square').forEach(square => {
            square.addEventListener('click', function() {
                if (this.dataset.date) {
                    showDayDetails(this.dataset.date);
                }
            });
        });
    });

    function setDateRange(days) {
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(endDate.getDate() - days);

        document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
        document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
    }

    function showDayDetails(date) {
        // You could implement a modal or redirect to calendar view for this date
        window.location.href = `/Calendar?year=${new Date(date).getFullYear()}&month=${new Date(date).getMonth() + 1}`;
    }
</script>

<style>
    .heatmap-container {
        overflow-x: auto;
        padding: 1rem 0;
    }

    .heatmap-legend {
        display: flex;
        justify-content: center;
    }

    .heatmap-legend-square {
        width: 12px;
        height: 12px;
        border-radius: 2px;
        cursor: pointer;
    }

    .heatmap-grid {
        display: grid;
        grid-template-rows: auto auto 1fr;
        gap: 8px;
        min-width: 800px;
    }

    .heatmap-months {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(14px, 1fr));
        gap: 2px;
        margin-bottom: 4px;
    }

    .heatmap-month-label {
        font-size: 0.75rem;
        color: var(--text-muted);
        text-align: left;
    }

    .heatmap-days {
        display: grid;
        grid-template-rows: repeat(7, 12px);
        gap: 2px;
        margin-right: 8px;
        width: 30px;
    }

    .heatmap-day-label {
        font-size: 0.75rem;
        color: var(--text-muted);
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding-right: 4px;
    }

    .heatmap-squares {
        display: flex;
        gap: 2px;
        flex-wrap: nowrap;
    }

    .heatmap-week {
        display: grid;
        grid-template-rows: repeat(7, 12px);
        gap: 2px;
    }

    .heatmap-square {
        width: 12px;
        height: 12px;
        border-radius: 2px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid var(--border-color);
    }

        .heatmap-square:hover {
            transform: scale(1.2);
            z-index: 1;
            border-color: var(--primary-color);
        }

        .heatmap-square.empty {
            background: transparent;
            border: none;
            cursor: default;
        }

    /* Heatmap levels - GitHub-style */
    .level-0, .heatmap-legend-square.level-0 {
        background-color: var(--gray-100);
    }

    .level-1, .heatmap-legend-square.level-1 {
        background-color: #c6e48b;
    }

    .level-2, .heatmap-legend-square.level-2 {
        background-color: #7bc96f;
    }

    .level-3, .heatmap-legend-square.level-3 {
        background-color: #239a3b;
    }

    .level-4, .heatmap-legend-square.level-4 {
        background-color: #196127;
    }

    /* Dark theme adjustments */
    [data-theme="dark"] .level-0 {
        background-color: var(--gray-800);
    }

    [data-theme="dark"] .level-1 {
        background-color: #0e4429;
    }

    [data-theme="dark"] .level-2 {
        background-color: #006d32;
    }

    [data-theme="dark"] .level-3 {
        background-color: #26a641;
    }

    [data-theme="dark"] .level-4 {
        background-color: #39d353;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.75rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .streak-info, .performance-breakdown {
        background-color: var(--bg-secondary);
        padding: 1rem;
        border-radius: 0.5rem;
    }

@*    @media (max-width: 768px) {
        .heatmap-container

    {
        padding: 0.5rem 0;
    }

    .heatmap-grid {
        min-width: 600px;
    }

    .heatmap-square, .heatmap-legend-square {
        width: 10px;
        height: 10px;
    }

    .heatmap-days {
        width: 25px;
    }

    .heatmap-day-label {
        font-size: 0.625rem;
    }

    } *@
</style>

@functions {
    private List<int> CalculateStreaks(List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData> data)
    {
        var streaks = new List<int>();
        var currentStreak = 0;

        foreach (var day in data.OrderBy(d => d.Date))
        {
            if (day.CompletionRate >= 80) // 80% threshold for streak
            {
                currentStreak++;
            }
            else
            {
                if (currentStreak > 0)
                {
                    streaks.Add(currentStreak);
                    currentStreak = 0;
                }
            }
        }

        if (currentStreak > 0)
        {
            streaks.Add(currentStreak);
        }

        return streaks;
    }

    private int CalculateCurrentStreak(List<HabitGoalTrackerApp.Models.ViewModels.CalendarHeatmapData> data)
    {
        var streak = 0;
        var orderedData = data.OrderByDescending(d => d.Date).ToList();

        foreach (var day in orderedData)
        {
            if (day.CompletionRate >= 80)
            {
                streak++;
            }
            else
            {
                break;
            }
        }

        return streak;
    }
}